import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.CapMb7lI.js";const E=JSON.parse('{"title":"[Test] 玩測試 - Jest","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/first-jest-toy.md","filePath":"blogs/first-jest-toy.md"}'),n={name:"blogs/first-jest-toy.md"};function p(l,s,h,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="test-玩測試-jest" tabindex="-1">[Test] 玩測試 - Jest <a class="header-anchor" href="#test-玩測試-jest" aria-label="Permalink to &quot;[Test] 玩測試 - Jest&quot;">​</a></h1><h2 id="jest" tabindex="-1">Jest <a class="header-anchor" href="#jest" aria-label="Permalink to &quot;Jest&quot;">​</a></h2><p>murmur...... 會挑Jest主要因為它環境設定起來舒服一點 不管在前端環境還是後端環境，都可以很輕鬆地寫測試 我的test code是用TypeScript寫的 所以還要另外設定Typescript的環境 就來看怎麼設定吧</p><h2 id="環境設定" tabindex="-1">環境設定 <a class="header-anchor" href="#環境設定" aria-label="Permalink to &quot;環境設定&quot;">​</a></h2><ul><li>首先當然就是安裝啦～</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jest</span></span></code></pre></div><ul><li>然後在 <code>package.json</code>增加這段</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>再來要設定Typescript的環境 官方教學是安裝<code>@babel/preset-typescript</code> 但我自己是使用<a href="https://github.com/kulshekhar/ts-jest" target="_blank" rel="noreferrer"><code>ts-jest</code></a></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/jest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-jest</span></span></code></pre></div><p>typescript本身需要安裝的package自己請先安裝好XD</p><ul><li>最後就是設定jest的config啦～ 可以建一個<code>jest.config.js</code>的設定檔 或是直接在<code>package.json</code>裡面設定jest環境參數 我自己是用<code>package.json</code>的方式</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;jest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;setupFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dotenv/config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts-jest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;moduleNameMapper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 這邊主要是設定ts config的path mapping</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;moduleFileExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>到這邊基本的環境都設定完了，之後需要什麼再微調吧</p><h2 id="test-code" tabindex="-1">Test Code <a class="header-anchor" href="#test-code" aria-label="Permalink to &quot;Test Code&quot;">​</a></h2><p>Jest的測試碼不用像其他的測試套件在*.test.ts或*.test.js還要import, require其它套件 環境設定好 直接寫describe, test, beforeAll, beforeEach, afterAll, afterEach, expect, mock, ....... 就是直接寫測試code啦，不用再import有的沒的</p><p>test code路徑我是放在&lt;rootDir&gt;/test/*.test.ts (這路徑是參考很多open source的)</p><p>測試是個很深奧的領域 測試性質有分很多種 單元測試 整合測試 e2e測試... 單元測試的<code>單元</code>大小怎麼切 等等，我還沒有寫太多測試 但有寫測試會發現，程式架構會變得好很多 要測試的method的side effect會消失(有side effect會發現超難測) 非常的解耦，以OOP來講就是會用大量的DI，相依太高也非常的不好測試 FP的話，就是各種curry或是closure 精神就是不要在method裡面另外建立其他的物件工具，這樣會非常的難測試</p><p>以下放個非常簡單的測試code</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { sum } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.....&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;util 測試&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;加法&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><p>之後有時間再來分享比較複雜的測試 (async/await, mock function, mock data.....)</p>`,21)]))}const c=i(n,[["render",p]]);export{E as __pageData,c as default};
